type Content @entity {
  id: ID!
  nftAddress: Bytes!
  nftId: BigInt!
  licenses: [License!]!
}

interface License {
  id: ID!
  licenseManagerAddress: Bytes!
  content: Content!
  contentOwnerWhenRegistered: Bytes!
}

type PurchasableLicense implements License @entity {
  id: ID!
  licenseManagerAddress: Bytes!
  content: Content!
  contentOwnerWhenRegistered: Bytes!
  price: BigInt!
  sharePercentage: Int!
  licenseTokenAddress: Bytes!
}

type RevShareLicense implements License @entity {
  id: ID!
  licenseManagerAddress: Bytes!
  content: Content!
  contentOwnerWhenRegistered: Bytes!
  minSharePercentage: Int!
}

type PurchaseEvent @entity {
  id: ID!
  content: Content!
  purchaser: Bytes!
  licensesBought: BigInt!
  pricePaid: BigInt!
  licenseTokenAddress: Bytes!
  blockNumber: BigInt!
}

type Royalties @entity {
  id: ID!
  totalClaimableBalance: BigInt!
}

type Window @entity {
  id: ID!
  index: BigInt!
  fundsAvailable: BigInt!
  merkleRoot: Bytes!
  blockNumber: BigInt!
}

type Transfer @entity {
  id: ID!
  to: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
}