// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTRegistered extends ethereum.Event {
  get params(): NFTRegistered__Params {
    return new NFTRegistered__Params(this);
  }
}

export class NFTRegistered__Params {
  _event: NFTRegistered;

  constructor(event: NFTRegistered) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minSharePercentage(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class NFTUnregistered extends ethereum.Event {
  get params(): NFTUnregistered__Params {
    return new NFTUnregistered__Params(this);
  }
}

export class NFTUnregistered__Params {
  _event: NFTUnregistered;

  constructor(event: NFTUnregistered) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RevShareLicenseManager extends ethereum.SmartContract {
  static bind(address: Address): RevShareLicenseManager {
    return new RevShareLicenseManager("RevShareLicenseManager", address);
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  registeredNFTs(param0: Address, param1: BigInt): i32 {
    let result = super.call(
      "registeredNFTs",
      "registeredNFTs(address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toI32();
  }

  try_registeredNFTs(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "registeredNFTs",
      "registeredNFTs(address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  zoraMedia(): Address {
    let result = super.call("zoraMedia", "zoraMedia():(address)", []);

    return result[0].toAddress();
  }

  try_zoraMedia(): ethereum.CallResult<Address> {
    let result = super.tryCall("zoraMedia", "zoraMedia():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get description_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get zoraAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateAndRegisterNFTCall extends ethereum.Call {
  get inputs(): CreateAndRegisterNFTCall__Inputs {
    return new CreateAndRegisterNFTCall__Inputs(this);
  }

  get outputs(): CreateAndRegisterNFTCall__Outputs {
    return new CreateAndRegisterNFTCall__Outputs(this);
  }
}

export class CreateAndRegisterNFTCall__Inputs {
  _call: CreateAndRegisterNFTCall;

  constructor(call: CreateAndRegisterNFTCall) {
    this._call = call;
  }

  get data(): CreateAndRegisterNFTCallDataStruct {
    return this._call.inputValues[0].value.toTuple() as CreateAndRegisterNFTCallDataStruct;
  }

  get bidShares(): CreateAndRegisterNFTCallBidSharesStruct {
    return this._call.inputValues[1].value.toTuple() as CreateAndRegisterNFTCallBidSharesStruct;
  }

  get sig(): CreateAndRegisterNFTCallSigStruct {
    return this._call.inputValues[2].value.toTuple() as CreateAndRegisterNFTCallSigStruct;
  }

  get minSharePercentage(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateAndRegisterNFTCall__Outputs {
  _call: CreateAndRegisterNFTCall;

  constructor(call: CreateAndRegisterNFTCall) {
    this._call = call;
  }
}

export class CreateAndRegisterNFTCallDataStruct extends ethereum.Tuple {
  get tokenURI(): string {
    return this[0].toString();
  }

  get metadataURI(): string {
    return this[1].toString();
  }

  get contentHash(): Bytes {
    return this[2].toBytes();
  }

  get metadataHash(): Bytes {
    return this[3].toBytes();
  }
}

export class CreateAndRegisterNFTCallBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): CreateAndRegisterNFTCallBidSharesPrevOwnerStruct {
    return this[0].toTuple() as CreateAndRegisterNFTCallBidSharesPrevOwnerStruct;
  }

  get creator(): CreateAndRegisterNFTCallBidSharesCreatorStruct {
    return this[1].toTuple() as CreateAndRegisterNFTCallBidSharesCreatorStruct;
  }

  get owner(): CreateAndRegisterNFTCallBidSharesOwnerStruct {
    return this[2].toTuple() as CreateAndRegisterNFTCallBidSharesOwnerStruct;
  }
}

export class CreateAndRegisterNFTCallBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class CreateAndRegisterNFTCallBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class CreateAndRegisterNFTCallBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class CreateAndRegisterNFTCallSigStruct extends ethereum.Tuple {
  get deadline(): BigInt {
    return this[0].toBigInt();
  }

  get v(): i32 {
    return this[1].toI32();
  }

  get r(): Bytes {
    return this[2].toBytes();
  }

  get s(): Bytes {
    return this[3].toBytes();
  }
}

export class RegisterNFTCall extends ethereum.Call {
  get inputs(): RegisterNFTCall__Inputs {
    return new RegisterNFTCall__Inputs(this);
  }

  get outputs(): RegisterNFTCall__Outputs {
    return new RegisterNFTCall__Outputs(this);
  }
}

export class RegisterNFTCall__Inputs {
  _call: RegisterNFTCall;

  constructor(call: RegisterNFTCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minSharePercentage(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class RegisterNFTCall__Outputs {
  _call: RegisterNFTCall;

  constructor(call: RegisterNFTCall) {
    this._call = call;
  }
}

export class UnregisterNFTCall extends ethereum.Call {
  get inputs(): UnregisterNFTCall__Inputs {
    return new UnregisterNFTCall__Inputs(this);
  }

  get outputs(): UnregisterNFTCall__Outputs {
    return new UnregisterNFTCall__Outputs(this);
  }
}

export class UnregisterNFTCall__Inputs {
  _call: UnregisterNFTCall;

  constructor(call: UnregisterNFTCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnregisterNFTCall__Outputs {
  _call: UnregisterNFTCall;

  constructor(call: UnregisterNFTCall) {
    this._call = call;
  }
}
