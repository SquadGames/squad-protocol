/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LicenseManager,
  LicenseManagerInterface,
} from "../LicenseManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
      {
        internalType: "address",
        name: "squadNftAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "squadNft",
    outputs: [
      {
        internalType: "contract IERC721Squad",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106c73803806106c7833981810160405281019061003291906101b9565b8160009080519060200190610048929190610091565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506103cd565b82805461009d906102d0565b90600052602060002090601f0160209004810192826100bf5760008555610106565b82601f106100d857805160ff1916838001178555610106565b82800160010185558215610106579182015b828111156101055782518255916020019190600101906100ea565b5b5090506101139190610117565b5090565b5b80821115610130576000816000905550600101610118565b5090565b60006101476101428461023a565b610215565b90508281526020810184848401111561016357610162610396565b5b61016e84828561029d565b509392505050565b600081519050610185816103b6565b92915050565b600082601f8301126101a05761019f610391565b5b81516101b0848260208601610134565b91505092915050565b600080604083850312156101d0576101cf6103a0565b5b600083015167ffffffffffffffff8111156101ee576101ed61039b565b5b6101fa8582860161018b565b925050602061020b85828601610176565b9150509250929050565b600061021f610230565b905061022b8282610302565b919050565b6000604051905090565b600067ffffffffffffffff82111561025557610254610362565b5b61025e826103a5565b9050602081019050919050565b60006102768261027d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156102bb5780820151818401526020810190506102a0565b838111156102ca576000848401525b50505050565b600060028204905060018216806102e857607f821691505b602082108114156102fc576102fb610333565b5b50919050565b61030b826103a5565b810181811067ffffffffffffffff8211171561032a57610329610362565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6103bf8161026b565b81146103ca57600080fd5b50565b6102eb806103dc6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637284e4161461003b5780637b30e49814610059575b600080fd5b610043610077565b604051610050919061018e565b60405180910390f35b610061610105565b60405161006e9190610173565b60405180910390f35b6000805461008490610243565b80601f01602080910402602001604051908101604052809291908181526020018280546100b090610243565b80156100fd5780601f106100d2576101008083540402835291602001916100fd565b820191906000526020600020905b8154815290600101906020018083116100e057829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610134816101ec565b82525050565b6000610145826101b0565b61014f81856101bb565b935061015f818560208601610210565b610168816102a4565b840191505092915050565b6000602082019050610188600083018461012b565b92915050565b600060208201905081810360008301526101a8818461013a565b905092915050565b600081519050919050565b600082825260208201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101f7826101fe565b9050919050565b6000610209826101cc565b9050919050565b60005b8381101561022e578082015181840152602081019050610213565b8381111561023d576000848401525b50505050565b6000600282049050600182168061025b57607f821691505b6020821081141561026f5761026e610275565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220b5649cca8d945d5cb09ce58e5908df0be12f2af1dc89d4603a5d6db630b2cd3664736f6c63430008050033";

export class LicenseManager__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    description_: string,
    squadNftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LicenseManager> {
    return super.deploy(
      description_,
      squadNftAddress,
      overrides || {}
    ) as Promise<LicenseManager>;
  }
  getDeployTransaction(
    description_: string,
    squadNftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      description_,
      squadNftAddress,
      overrides || {}
    );
  }
  attach(address: string): LicenseManager {
    return super.attach(address) as LicenseManager;
  }
  connect(signer: Signer): LicenseManager__factory {
    return super.connect(signer) as LicenseManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LicenseManagerInterface {
    return new utils.Interface(_abi) as LicenseManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LicenseManager {
    return new Contract(address, _abi, signerOrProvider) as LicenseManager;
  }
}
