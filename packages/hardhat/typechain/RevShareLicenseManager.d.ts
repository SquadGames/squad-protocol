/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RevShareLicenseManagerInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "createAndRegisterNFT(address,tuple,uint8)": FunctionFragment;
    "description()": FunctionFragment;
    "minSharePercentages(address,uint256)": FunctionFragment;
    "registerNFT(address,uint256,address,uint8)": FunctionFragment;
    "registeredNFTs(address,uint256)": FunctionFragment;
    "squadNft()": FunctionFragment;
    "unregisterNFT(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAndRegisterNFT",
    values: [string, { contentURI: string; metadataURI: string }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSharePercentages",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNFT",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredNFTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "squadNft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterNFT",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAndRegisterNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSharePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "squadNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterNFT",
    data: BytesLike
  ): Result;

  events: {
    "NFTRegistered(address,uint256,address,uint8)": EventFragment;
    "NFTUnregistered(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTUnregistered"): EventFragment;
}

export class RevShareLicenseManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RevShareLicenseManagerInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    createAndRegisterNFT(
      creator: string,
      data: { contentURI: string; metadataURI: string },
      minSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    description(overrides?: CallOverrides): Promise<[string]>;

    minSharePercentages(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    registerNFT(
      nftAddress: string,
      nftId: BigNumberish,
      registrant: string,
      minSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    squadNft(overrides?: CallOverrides): Promise<[string]>;

    unregisterNFT(
      nftAddress: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  createAndRegisterNFT(
    creator: string,
    data: { contentURI: string; metadataURI: string },
    minSharePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  description(overrides?: CallOverrides): Promise<string>;

  minSharePercentages(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  registerNFT(
    nftAddress: string,
    nftId: BigNumberish,
    registrant: string,
    minSharePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredNFTs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  squadNft(overrides?: CallOverrides): Promise<string>;

  unregisterNFT(
    nftAddress: string,
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    createAndRegisterNFT(
      creator: string,
      data: { contentURI: string; metadataURI: string },
      minSharePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    description(overrides?: CallOverrides): Promise<string>;

    minSharePercentages(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    registerNFT(
      nftAddress: string,
      nftId: BigNumberish,
      registrant: string,
      minSharePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    squadNft(overrides?: CallOverrides): Promise<string>;

    unregisterNFT(
      nftAddress: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NFTRegistered(
      nftAddress?: null,
      nftId?: null,
      registrant?: null,
      minSharePercentage?: null
    ): TypedEventFilter<
      [string, BigNumber, string, number],
      {
        nftAddress: string;
        nftId: BigNumber;
        registrant: string;
        minSharePercentage: number;
      }
    >;

    NFTUnregistered(
      nftAddress?: null,
      nftId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { nftAddress: string; nftId: BigNumber }
    >;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    createAndRegisterNFT(
      creator: string,
      data: { contentURI: string; metadataURI: string },
      minSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    minSharePercentages(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerNFT(
      nftAddress: string,
      nftId: BigNumberish,
      registrant: string,
      minSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    squadNft(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterNFT(
      nftAddress: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAndRegisterNFT(
      creator: string,
      data: { contentURI: string; metadataURI: string },
      minSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSharePercentages(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNFT(
      nftAddress: string,
      nftId: BigNumberish,
      registrant: string,
      minSharePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    squadNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unregisterNFT(
      nftAddress: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
